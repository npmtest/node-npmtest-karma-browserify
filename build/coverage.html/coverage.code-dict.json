{"/home/travis/build/npmtest/node-npmtest-karma-browserify/test.js":"/* istanbul instrument in package npmtest_karma_browserify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-karma-browserify/lib.npmtest_karma_browserify.js":"/* istanbul instrument in package npmtest_karma_browserify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_karma_browserify = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_karma_browserify = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-karma-browserify/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-karma-browserify && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_karma_browserify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_karma_browserify\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_karma_browserify.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_karma_browserify.rollup.js'] =\n            local.assetsDict['/assets.npmtest_karma_browserify.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_karma_browserify.__dirname + '/lib.npmtest_karma_browserify.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-karma-browserify/node_modules/karma-browserify/index.js":"'use strict';\n\nvar Bro = require('./lib/bro');\n\nfunction framework(injector, bro) {\n  return injector.invoke(bro.framework);\n}\n\nfunction testFilePreprocessor(injector, bro) {\n  return injector.invoke(bro.testFilePreprocessor);\n}\n\nfunction bundlePreprocessor(injector, bro) {\n  return injector.invoke(bro.bundlePreprocessor);\n}\n\nmodule.exports = {\n  'bro': [ 'type', Bro ],\n  'framework:browserify': [ 'factory', framework ],\n  'preprocessor:browserify': [ 'factory', testFilePreprocessor ],\n  'preprocessor:browserify-bundle': [ 'factory', bundlePreprocessor ]\n};\n\n\n// override the default preprocess factory to add our\n// preprocessor for *.browserify files\n\ntry {\n  module.exports.preprocess = [ 'factory', require('./lib/preprocessor').createPreprocessor ];\n} catch (e) {\n  console.warn('failed to add custom browserify preprocessor');\n  console.warn(e);\n}","/home/travis/build/npmtest/node-npmtest-karma-browserify/node_modules/karma-browserify/lib/bro.js":"'use strict';\n\nvar browserify = require('browserify'),\n    watchify;\n\ntry {\n  watchify = require('watchify');\n} catch (e) {\n  // watchify is an optional dependency\n\n  // we will fail as soon as a user tires to use autoWatch without\n  // watchify installed.\n}\n\n\nvar convert = require('convert-source-map'),\n    minimatch = require('minimatch'),\n    escape = require('js-string-escape');\n\nvar path = require('path'),\n    fs = require('fs');\n\nvar reduce = require('lodash/collection/reduce'),\n    find = require('lodash/collection/find'),\n    any = require('lodash/collection/any'),\n    forEach = require('lodash/collection/forEach'),\n    assign = require('lodash/object/assign'),\n    omit = require('lodash/object/omit'),\n    debounce = require('lodash/function/debounce');\n\n\nvar BundleFile = require('./bundle-file');\n\n\n/**\n * The time to wait for additional file change nofifications\n * before performing a rebundling operation.\n *\n * This value must be chosen with care. The smaller it is, the\n * faster the rebundling + testing cycle is. At the same time\n * the chance increases karma-browserify performs bundling steps\n * twice because it triggers a rebundle before all file change\n * triggers have been transmitted.\n */\nvar DEFAULT_BUNDLE_DELAY = 700;\n\nvar BUNDLE_ERROR_TPL = 'throw new Error(\"bundle error (see logs)\");';\n\n\n/**\n * Extract the source map from the given bundle contents\n *\n * @param {String} source\n * @return {SourceMap} if it could be parsed\n */\nfunction extractSourceMap(bundleContents) {\n  var start = bundleContents.lastIndexOf('//# sourceMappingURL');\n  var sourceMapComment = start !== -1 ? bundleContents.substring(start) : '';\n\n  return sourceMapComment && convert.fromComment(sourceMapComment);\n}\n\n/**\n * Creates an instance of karma-browserify that provides the\n * neccessary framework and preprocessors.\n *\n * @param {BundleFile} [bundleFile]\n */\nfunction Bro(bundleFile) {\n\n  var log;\n\n  /**\n   * Add bundle file to the list of files in the\n   * configuration, right before the first browserified\n   * test file and after everything else.\n   *\n   * That makes sure users can include non-commonJS files\n   * prior to the browserified bundle.\n   *\n   * @param {BundleFile} bundleFile the file containing the browserify bundle\n   * @param {Object} config the karma configuration to be updated\n   */\n  function addBundleFile(bundleFile, config) {\n\n    var files = config.files,\n        preprocessors = config.preprocessors;\n\n    // list of patterns using our preprocessor\n    var patterns = reduce(preprocessors, function(matched, val, key) {\n      if (val.indexOf('browserify') !== -1) {\n        matched.push(key);\n      }\n      return matched;\n    }, []);\n\n    // first file being preprocessed\n    var file = find(files, function(f) {\n      return any(patterns, function(p) {\n        return minimatch(f.pattern, p);\n      });\n    });\n\n    var idx = 0;\n\n    if (file) {\n      idx = files.indexOf(file);\n    } else {\n      log.debug('no matching preprocessed file was found, defaulting to prepend');\n    }\n\n    log.debug('add bundle to config.files at position', idx);\n\n    // insert bundle on the correct spot\n    files.splice(idx, 0, {\n      pattern: bundleFile.location,\n      served: true,\n      included: true,\n      watched: true\n    });\n  }\n\n\n  /**\n   * The browserify instance that creates the\n   * minified bundle and gets added all test files to it.\n   */\n  var b;\n\n\n  /**\n   * The browserify framework that creates the initial logger and bundle file\n   * as well as prepends the bundle file to the karma file configuration.\n   */\n  function framework(emitter, config, logger) {\n\n    log = logger.create('framework.browserify');\n\n    if (!bundleFile) {\n      bundleFile = new BundleFile();\n    }\n\n    bundleFile.touch();\n    log.debug('created browserify bundle: %s', bundleFile.location);\n\n    b = createBundle(config);\n\n    // TODO(Nikku): hook into karma karmas file update facilities\n    // to remove files from the bundle once karma detects the deletion\n\n    // hook into exit for cleanup\n    emitter.on('exit', function(done) {\n      log.debug('cleaning up');\n\n      if (b.close) {\n        b.close();\n      }\n\n      bundleFile.remove();\n      done();\n    });\n\n\n    // add bundle file to the list of files defined in the\n    // configuration. be smart by doing so.\n    addBundleFile(bundleFile, config);\n\n    return b;\n  }\n\n  framework.$inject = [ 'emitter', 'config', 'logger' ];\n\n\n  /**\n   * Create the browserify bundle\n   */\n  function createBundle(config) {\n\n    var bopts = config.browserify || {},\n        bundleDelay = bopts.bundleDelay || DEFAULT_BUNDLE_DELAY,\n        requireName = bopts.externalRequireName || 'require';\n\n    function warn(key) {\n      log.warn('Invalid config option: \"' + key + 's\" should be \"' + key + '\"');\n    }\n\n    forEach([ 'transform', 'plugin' ], function(key) {\n      if (bopts[key + 's']) {\n        warn(key);\n      }\n    });\n\n    var browserifyOptions = assign({\n      basedir: path.resolve(config.basePath),\n      // watchify.args\n      cache: {},\n      packageCache: {}\n    }, omit(bopts, [\n      'transform', 'plugin', 'configure', 'bundleDelay'\n    ]));\n\n    if ('prebundle' in browserifyOptions) {\n      log.warn('The prebundle hook got removed in favor of configure');\n    }\n\n    if ('watchify' in browserifyOptions) {\n      log.warn('Configure watchify via config.watchify');\n    }\n\n    var w = browserify(browserifyOptions);\n    w.setMaxListeners(Infinity);\n\n    forEach(bopts.plugin, function(p) {\n      // ensure we can pass plugin options as\n      // the first parameter\n      if (!Array.isArray(p)) {\n        p = [ p ];\n      }\n      w.plugin.apply(w, p);\n    });\n\n    forEach(bopts.transform, function(t) {\n      // ensure we can pass transform options as\n      // the first parameter\n      if (!Array.isArray(t)) {\n        t = [ t ];\n      }\n      w.transform.apply(w, t);\n    });\n\n    // test if we have a configure function\n    if (bopts.configure && typeof bopts.configure === 'function') {\n      bopts.configure(w);\n    }\n\n    // register rebuild bundle on change\n    if (config.autoWatch) {\n\n      if (!watchify) {\n        log.error('watchify not found; install it via npm install --save-dev watchify');\n        log.error('cannot perform incremental rebuild');\n\n        throw new Error('watchify not found');\n      }\n\n      w = watchify(w, config.watchify);\n\n      log.info('registering rebuild (autoWatch=true)');\n\n      w.on('update', function(updated) {\n\n        // we perform an update, karma will trigger one, too\n        // because the bundling is deferred only one change will\n        // be triggered. Anything else is the result of a\n        // raise condition or a problem of watchify firing file\n        // changes to late\n\n        log.debug('files changed');\n        deferredBundle();\n      });\n\n      w.on('log', function(msg) {\n        log.info(msg);\n      });\n\n      // update bundle file\n      w.on('bundled', function(err, content) {\n        if (w._builtOnce) {\n          bundleFile.update(err ? BUNDLE_ERROR_TPL : content.toString('utf-8'));\n          log.info('bundle updated');\n        }\n      });\n    }\n\n    function deferredBundle(cb) {\n      if (cb) {\n        w.once('bundled', cb);\n      }\n\n      rebuild();\n    }\n\n    var rebuild = debounce(function rebuild() {\n\n      if (w._bundled) {\n        log.debug('resetting bundle');\n\n        var recorded = w._recorded;\n        w.reset();\n\n        recorded.forEach(function(e) {\n          // we remove missing files on the fly\n          // to cope with bundle internals missing\n          if (e.file && !fs.existsSync(path.resolve(config.basePath, e.file))) {\n            log.debug('removing missing file', e.file);\n          } else {\n            w.pipeline.write(e);\n          }\n        });\n      }\n\n      w.emit('prebundle', w);\n\n      log.debug('bundling');\n\n      w.bundle(function(err, content) {\n\n        if (err) {\n          log.error('bundle error');\n          log.error(String(err));\n        }\n\n        w.emit('bundled', err, content);\n      });\n    }, bundleDelay);\n\n\n    w.bundleFile = function(file, done) {\n\n      var absolutePath = path.resolve(file.path),\n          relativePath = path.relative(config.basePath, absolutePath);\n\n      // add file\n      log.debug('updating %s in bundle', relativePath);\n\n      // add the file during next prebundle step\n      w.once('prebundle', function() {\n        w.require('./' + relativePath, { expose: absolutePath });\n      });\n\n      deferredBundle(function(err) {\n        var stub = 'typeof ' + requireName + ' === \"function\" && ' + requireName + '(\"' + escape(absolutePath) + '\");';\n\n        done(err, stub);\n      });\n    };\n\n\n    /**\n     * Wait for the bundle creation to have stabilized (no more additions) and invoke a callback.\n     *\n     * @param {Function} [callback] invoked with (err, content)\n     */\n    w.deferredBundle = deferredBundle;\n\n    return w;\n  }\n\n\n  /**\n   * A processor that preprocesses commonjs test files which should be\n   * delivered via browserify.\n   */\n  function testFilePreprocessor() {\n\n    return function(content, file, done) {\n      b.bundleFile(file, function(err, content) {\n        done(content && content.toString());\n      });\n    };\n  }\n\n  testFilePreprocessor.$inject = [ ];\n\n\n  /**\n   * A special preprocessor that builds the main browserify bundle once and\n   * passes the bundle contents through on all later preprocessing request.\n   */\n  function bundlePreprocessor(config) {\n\n    var debug = config.browserify && config.browserify.debug;\n\n    function updateSourceMap(file, content) {\n      var map;\n\n      if (debug) {\n\n        map = extractSourceMap(content);\n\n        file.sourceMap = map && map.sourcemap;\n      }\n    }\n\n    return function(content, file, done) {\n\n      if (b._builtOnce) {\n        updateSourceMap(file, content);\n        return done(content);\n      }\n\n      log.debug('building bundle');\n\n      // wait for the initial bundle to be created\n      b.deferredBundle(function(err, content) {\n\n        b._builtOnce = config.autoWatch;\n\n        if (err) {\n          return done(BUNDLE_ERROR_TPL);\n        }\n\n        content = content.toString('utf-8');\n        updateSourceMap(file, content);\n\n        log.info('bundle built');\n\n        done(content);\n      });\n    };\n  }\n\n  bundlePreprocessor.$inject = [ 'config' ];\n\n\n  // API\n\n  this.framework = framework;\n\n  this.testFilePreprocessor = testFilePreprocessor;\n  this.bundlePreprocessor = bundlePreprocessor;\n}\n\nBro.$inject = [];\n\nmodule.exports = Bro;\n","/home/travis/build/npmtest/node-npmtest-karma-browserify/node_modules/karma-browserify/lib/bundle-file.js":"'use strict';\n\nvar fs = require('fs'),\n    path = require('path'),\n    os = require('os-shim'),\n    hat = require('hat');\n\n/**\n * Create a temp file unique to the project\n */\nfunction getTempFileName(suffix) {\n  return path.join(os.tmpdir(), hat() + suffix);\n}\n\n/**\n * A instance of a bundle file\n */\nfunction BundleFile() {\n\n  var location = getTempFileName('.browserify');\n\n  function write(content) {\n    fs.writeFileSync(location, content);\n  }\n\n  function exists() {\n    return fs.existsSync(location);\n  }\n\n  function remove() {\n    if (exists()) {\n      fs.unlinkSync(location);\n    }\n  }\n\n  function touch() {\n    if (!exists()) {\n      write('');\n    }\n  }\n\n\n  // API\n\n  this.touch = touch;\n\n  this.update = write;\n  this.remove = remove;\n\n  this.location = location;\n}\n\n\n// module exports\n\nmodule.exports = BundleFile;\nmodule.exports.getTempFileName = getTempFileName;\n","/home/travis/build/npmtest/node-npmtest-karma-browserify/node_modules/karma-browserify/lib/preprocessor.js":"'use strict';\n\nvar preprocessor = require('karma/lib/preprocessor');\nvar os = require('os-shim');\nvar path = require('path');\n\nvar api = ['config.preprocessors', 'config.basePath', 'injector'];\n\n\nfunction arrayEquals(a, b) {\n  return a.join('#') === b.join('#');\n}\n\n\nfunction getPreprocessorFactory() {\n\n  var factory = preprocessor.createPreprocessor;\n\n  if (!arrayEquals(factory.$inject, api)) {\n    console.log('incompatible karma preprocessor: found', factory.$inject, 'expected', api);\n    throw new Error('incompatible karma preprocessor');\n  }\n\n  return factory;\n}\n\n\n/**\n * Monkey patch preprocessors to preprocess *.browserify\n */\n\nvar originalFactory = getPreprocessorFactory();\n\nvar createPreprocessor = function(config, basePath, injector) {\n\n  // add our preprocessor for .browserify files\n  config[path.resolve(os.tmpdir(), '*.browserify')] = ['browserify-bundle'];\n\n  return originalFactory(config, basePath, injector);\n};\n\ncreatePreprocessor.$inject = api;\n\n\n// publish patched preprocessor\nmodule.exports.createPreprocessor = createPreprocessor;\n"}